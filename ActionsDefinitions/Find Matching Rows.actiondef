{"Name":"Find Matching Rows","Description":"Return any matching rows based upon a column search","Script":"from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nimport TableManager\nimport google.auth.transport.requests\nfrom google.oauth2 import service_account\nimport json\nimport requests\n\nCOLUMNS = []\nJSON_RESULT = []\n\nsiemplify = SiemplifyAction()\ntable = siemplify.extract_action_param(\"Data Table Name\", print_value=True)\ncolumn = siemplify.extract_action_param(\"Column Name\", print_value=True)\nsearch_operator = siemplify.extract_action_param(\"Search Expression\", print_value=True)\nsearch_for = siemplify.extract_action_param(\"String to search\", print_value=True)\nsa_json = siemplify.extract_configuration_param('Integration',\"Service Account JSON\")\nsa_json = json.loads(sa_json)\nproject_name = siemplify.extract_configuration_param('Integration',\"GCP Project ID\")\nregion = siemplify.extract_configuration_param('Integration',\"GCP Region\")\ntenant = siemplify.extract_configuration_param('Integration',\"Google SecOps Tenant ID\")\n\n\n@output_handler\ndef main():\n    c = TableManager.secops.get_datatable_json(sa_json,\n                                                project_name,\n                                                region,\n                                                tenant,\n                                                table,\n                                                siemplify)\n\n    # Check if we got a valid response\n    if 'error' in c:\n        output_message = f\"Unable to retrieve data table. Is the name correct?\"\n        status = EXECUTION_STATE_FAILED\n        siemplify.LOGGER.error(output_message)\n        result_value = False\n        siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n        siemplify.end(output_message, result_value, status)\n    else:\n        # Let's test if the column name is correct\n        try:\n            c[0][column]\n            siemplify.LOGGER.info(\"Column found: \" + column)\n        except KeyError as e:\n            siemplify.LOGGER.info(\"Column not found: \" + column)\n            output_message = f\"Unable to retrieve column. Is the name correct?\"\n            status = EXECUTION_STATE_FAILED\n            siemplify.LOGGER.error(output_message)\n            result_value = False\n            siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n            siemplify.end(output_message, result_value, status)\n\n        result_dict = []\n\n        # Start to loop through the dict and find matches\n        for i in c:\n            # equals\n            if search_operator == 'equals':\n                if i[column] == search_for:\n                    # Add to results\n                    result_dict.append(i)\n            # contains\n            if search_operator == 'contains':\n                if search_for in i[column]:\n                    # Add to results\n                    result_dict.append(i)\n\n        siemplify.result.add_result_json(result_dict)\n        status = EXECUTION_STATE_COMPLETED\n        output_message = str(len(result_dict)) + \" result(s) returned\"\n        result_value = True\n        siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n        siemplify.end(output_message, result_value, status)\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"Unofficial SecOps Data Tables","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{}","ShowResult":true}],"Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":71.0,"TimeoutSeconds":600,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"my_data_table","Description":"Name of the data table","Name":"Data Table Name","Value":"my_data_table","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Column1","Description":"Name of the column to search","Name":"Column Name","Value":"Column1","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"equals","Description":"The type of search to run","Name":"Search Expression","Value":"equals","Type":15,"OptionalValues":["equals","contains"],"OptionalValuesJson":"[\"equals\",\"contains\"]"},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"foobar","Description":"The string you're searching for","Name":"String to search","Value":"foobar","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}