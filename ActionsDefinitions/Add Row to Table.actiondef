{"Name":"Add Row to Table","Description":"Add a row of data to a table","Script":"from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nimport TableManager\nimport google.auth.transport.requests\nfrom google.oauth2 import service_account\nimport json\nimport requests\n\nsiemplify = SiemplifyAction()\ntable = siemplify.extract_action_param(\"Data Table Name\", print_value=True)\ndata = siemplify.extract_action_param(\"Data to add (comma-separated)\", print_value=True)\nsa_json = siemplify.extract_configuration_param('Integration',\"Service Account JSON\")\nsa_json = json.loads(sa_json)\nproject_name = siemplify.extract_configuration_param('Integration',\"GCP Project ID\")\nregion = siemplify.extract_configuration_param('Integration',\"GCP Region\")\ntenant = siemplify.extract_configuration_param('Integration',\"Google SecOps Tenant ID\")\n\n\n@output_handler\ndef main():\n    \n    # Create the endpoint url\n    API_BASE = \"https://\" + region + \"-chronicle.googleapis.com\"\n    PARENT = \"/v1alpha/projects/\" + project_name + \"/locations/\" + region + \"/instances/\" + tenant\n    URL = API_BASE + PARENT + \"/dataTables/\" + table + \"/dataTableRows\"\n\n    # Create a dict of the values that we'll insert\n    data_dict = data.split(\",\")\n\n    # Attempt to load the data\n    credentials = service_account.Credentials.from_service_account_info(\n        sa_json, scopes=[\"https://www.googleapis.com/auth/cloud-platform\"]\n        )\n    request = google.auth.transport.requests.Request()\n    credentials.refresh(request)\n    hd = {\n      \"Authorization\": \"Bearer \" + credentials.token,\n      \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"values\": data_dict\n    }\n\n    req = requests.post(URL, headers=hd, timeout=30, json=payload)\n\n    # If we get a create time, the row was added succesfully\n    if 'createTime' in req.text:\n        r_js = json.loads(req.text)\n        id_split = r_js['name'].split(\"/\")\n        row_id = id_split[9]\n\n        status = EXECUTION_STATE_COMPLETED\n        output_message = \"Successfully added row. ID: \" + row_id\n        result_value = True\n        siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n        siemplify.end(output_message, result_value, status)\n    else:\n        output_message = req.text\n        status = EXECUTION_STATE_FAILED\n        siemplify.LOGGER.error(output_message)\n        result_value = False\n        siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"Unofficial SecOps Data Tables","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{}","ShowResult":true}],"Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":86.0,"TimeoutSeconds":600,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"my_data_table","Description":"Name of the data table","Name":"Data Table Name","Value":"my_data_table","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"foo,bar,1234","Description":"Data to be inserted in to the table, separated by commas. The data should match the number of columns.","Name":"Data to add (comma-separated)","Value":"foo,bar,1234","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}