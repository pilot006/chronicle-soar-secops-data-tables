{"Name":"Ping","Description":"","Script":"from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nimport requests\nimport google.auth.transport.requests\nfrom google.oauth2 import service_account\nimport json\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n\n    sa_json = siemplify.extract_configuration_param('Integration',\"Service Account JSON\")\n    sa_json = json.loads(sa_json)\n    project_name = siemplify.extract_configuration_param('Integration',\"GCP Project ID\")\n    region = siemplify.extract_configuration_param('Integration',\"GCP Region\")\n    tenant = siemplify.extract_configuration_param('Integration',\"Google SecOps Tenant ID\")\n\n    # Get auth token\n    credentials = service_account.Credentials.from_service_account_info(\n        sa_json, scopes=['https://www.googleapis.com/auth/cloud-platform']\n        )\n    request = google.auth.transport.requests.Request()\n    credentials.refresh(request)\n\n    # Create URL using region & project config\n    # https://cloud.google.com/vertex-ai/docs/generative-ai/model-reference/gemini#http_request\n    endpoint = 'https://' + region + \"-chronicle.googleapis.com\"\n    endpoint = endpoint + '/v1alpha/projects/' \n    endpoint = endpoint + project_name + \"/locations/\" + region\n    endpoint = endpoint + '/instances/' + tenant\n    endpoint = endpoint + '/dataTables/secops_integration_test'\n    siemplify.LOGGER.info(\"endpoint: \" + endpoint)\n\n    hd = {\n        \"Authorization\": \"Bearer \" + credentials.token,\n        \"Content-Type\": \"application/json\"\n    }\n    req = requests.get(endpoint, headers=hd)\n    if 'Data Table Name' in req.text:\n        status = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n        output_message = \"output message :\"  # human readable message, showed in UI as the action result\n        result_value = True  # Set a simple result value, used for playbook if\\else and placeholders.\n    else:\n        output_message = f\"Unable to connect to SecOps Data Tables API\"\n        status = EXECUTION_STATE_FAILED\n        siemplify.LOGGER.error(output_message)\n        #siemplify.LOGGER.exception(e)\n        result_value = False\n\n    siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"Unofficial SecOps Data Tables","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{}","ShowResult":false}],"Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":19.0,"TimeoutSeconds":600,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}